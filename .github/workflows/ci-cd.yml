name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 814247511761.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_API: badminton-forum-api
  ECR_REPOSITORY_FRONTEND: badminton-forum-frontend

jobs:
  # 測試階段
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    # API 測試
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Check .NET format
      run: |
        cd BadmintonForum.API
        dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Run API Tests
      run: |
        cd BadmintonForum.API
        dotnet restore
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=testuser;Password=testpassword"
        JwtSettings__Secret: "TestSecretKeyThatIsLongEnoughForHS256Algorithm"
        JwtSettings__Issuer: "TestIssuer"
        JwtSettings__Audience: "TestAudience"
    
    # 前端測試
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: badminton-forum-vue/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd badminton-forum-vue
        npm ci
    
    - name: Build frontend
      run: |
        cd badminton-forum-vue
        npm run build
    
    # E2E 測試 (如果有的話)
    # - name: Run E2E tests
    #   run: |
    #     cd badminton-forum-vue
    #     npm run test:e2e

  # 建置 Docker 映像並推送到 ECR (僅在 main 分支)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push API image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_API:latest -f BadmintonForum.API/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
    
    - name: Build and push Frontend image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest -f badminton-forum-vue/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  # 部署到生產環境
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/badminton-forum
          
          # 拉取最新的部署配置
          git pull origin main
          
          # 更新 Docker 映像
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # 使用新的映像標籤更新 docker-compose
          export API_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_API }}:${{ github.sha }}"
          export FRONTEND_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}"
          
          # 停止舊容器並啟動新容器
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d
          
          # 清理舊映像
          docker system prune -af
          
          # 健康檢查
          sleep 30
          curl -f http://localhost/api/health || exit 1